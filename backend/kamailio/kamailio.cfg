#!KAMAILIO
#!define WITH_AUTH
#!define WITH_USRLOCDB
#!define WITH_MYSQL

# Load required modules
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "siputils.so"
loadmodule "mi_fifo.so"

# Module configurations
modparam("usrloc", "db_mode", 2)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("registrar", "max_contacts", 10)

# Main request routing logic
request_route {
    # Max forwards check
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483", "Too Many Hops");
        exit;
    }

    # Process Record-Route headers
    if (has_totag()) {
        if (loose_route()) {
            route(RELAY);
        } else {
            if ( is_method("ACK") ) {
                if ( t_check_trans() ) {
                    t_relay();
                    exit;
                } else {
                    exit;
                }
            }
            sl_send_reply("404", "Not here");
        }
        exit;
    }

    # Handle REGISTER requests
    if (is_method("REGISTER")) {
        if (!auth_check("$fd", "subscriber", "1")) {
            auth_challenge("$fd", "0");
            exit;
        }
        
        if (!save("location")) {
            sl_reply_error();
        }
        exit;
    }

    # Handle initial requests
    if (!is_method("REGISTER|MESSAGE")) {
        if (!auth_check("$fd", "subscriber", "1")) {
            auth_challenge("$fd", "0");
            exit;
        }
    }

    if ($rU==$null) {
        sl_send_reply("484", "Address Incomplete");
        exit;
    }

    # Route to destination
    if (!lookup("location")) {
        t_newtran();
        t_reply("404", "Not Found");
        exit;
    }

    route(RELAY);
}

# Relay route
route[RELAY] {
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
} 